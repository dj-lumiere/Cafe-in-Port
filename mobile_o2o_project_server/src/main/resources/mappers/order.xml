<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- name space는 BookRepo의 fully qualified name으로 설정한다. -->
<mapper namespace="com.ssafy.cafe.model.dao.OrderDao">
    <insert id="insert" parameterType="Order"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_order
        (user_no,
         order_table)
        VALUES (#{userNo},
                #{orderTable})
    </insert>

    <update id="update" parameterType="Order">
        UPDATE t_order
        SET status      = #{status},
            update_time = current_timestamp
        WHERE o_id = #{id}
    </update>

    <select id="selectByUser" parameterType="Integer" resultType="Order">
        SELECT o_id as id
             , user_no
             , order_table
             , create_time
             , update_time
             , status
        FROM t_order
        where user_no = #{userNo}
        order by o_id desc
    </select>


    <select id="selectOrderInfo" parameterType="int" resultMap="OrderResult">
        select o.o_id        as id
             , o.user_no
             , o.order_table
             , o.create_time as order_time
             , o.status
             , o.o_id        as order_id
        from t_order o

        where o_id = #{oid};
    </select>


    <!-- 관통 프로젝트 6단계에서 추가됨 -->
    <select id="getLastMonthOrder" parameterType="int" resultType="OrderInfo">
        select o.o_id        as id
             , o.user_no
             , o.order_table
             , o.create_time as order_time
             , o.status
             , o.o_id        as order_id
        from t_order o

        where user_no = #{id}
          and create_time > date_add(now(), interval -1 month)
        order by o.o_id desc
    </select>


    <select id="getLastMonthOrderItem" parameterType="int" resultType="OrderFrequency">
        SELECT tpd.p_id,
               sum(COALESCE(o.total_quantity, 0)) AS total_quantity
        FROM t_product_detail tpd
                 LEFT JOIN (SELECT od.product_detail_id,
                                   SUM(od.quantity) AS total_quantity
                            FROM t_order_detail od
                                     JOIN
                                 t_order o ON od.order_id = o.o_id
                            WHERE o.user_no = #{id}
                              AND o.create_time > DATE_ADD(NOW(), INTERVAL -1 MONTH)
                            GROUP BY od.product_detail_id) o ON tpd.id = o.product_detail_id
        group by tpd.p_id
    </select>

    <select id="getOrderDetailInfo" parameterType="int" resultType="OrderDetailInfo">
        select d.d_id                as id
             , o.o_id                as order_id
             , tp.id                 as product_id
             , d.quantity
             , o.create_time         as date
             , tp.img
             , tp.name
             , tp.type
             , pd.size
             , pd.temperature
             , pd.price              as unit_price
             , d.quantity * pd.price as sum_price
        from t_order o
                 join t_order_detail d on o.o_id = d.order_id
                 join t_product_detail pd on d.product_detail_id = pd.id
                 join t_product tp on pd.p_id = tp.id
        where o_id = #{orderId}
        order by d.d_id;
    </select>


    <!-- 관통 프로젝트 6단계에서 추가됨 -->
    <select id="getLast6MonthOrder" parameterType="int" resultMap="OrderResult">
        select o.o_id        as id
             , o.user_no
             , o.order_table
             , o.create_time as order_time
             , o.status
             , o.o_id        as order_id
        from t_order o

        where user_no = #{id}
          and create_time > date_add(now(), interval -6 month)
        order by o.o_id desc
    </select>

    <resultMap id="OrderResult" type="OrderInfo">
        <collection property="details" javaType="ArrayList" column="order_id" ofType="OrderDetailInfo"
                    select="getOrderDetailInfo"/>
    </resultMap>


</mapper>